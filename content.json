{"meta":{"title":"Artiver","subtitle":"海","description":"Artiver","author":"Artiver","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-08-15T08:51:44.000Z","updated":"2020-08-15T10:44:49.854Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-08-15T08:55:16.000Z","updated":"2020-08-15T10:45:06.972Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Eclipse配置Java14+Tomcat9开发JavaWeb","slug":"Eclipse配置Java14-Tomcat9开发JavaWeb","date":"2020-08-23T07:07:59.000Z","updated":"2020-08-23T08:29:21.419Z","comments":true,"path":"2020/08/23/Eclipse配置Java14-Tomcat9开发JavaWeb/","link":"","permalink":"http://yoursite.com/2020/08/23/Eclipse%E9%85%8D%E7%BD%AEJava14-Tomcat9%E5%BC%80%E5%8F%91JavaWeb/","excerpt":"eclipse便携版配置好Tomcat，便于开发Javaweb","text":"eclipse便携版配置好Tomcat，便于开发Javaweb 环境准备 Java下载，环境变量配置，这就不赘述了，到Oracle下载jdk即可 Tomcat下载，到Apache页面，目前10还在开发，我的版本是9，解压到合适目录 eclipse，在官网下载就好，我选的是便携版的eclipse for enterprise，解压到合适目录 配置 1、安装启动eclipse，选项卡Windows--preference--server--runtime environment，点击add，选择Apache tomcat v9.0，next，browse，选择Tomcat的目录，然后确定，finish，apply and close 2、建立工程选项卡，file--new--other，往下选择web--dynamic web project，next，填写项目名，next，next，记得勾选generate web.xml！finish 3、最后配置如果eclipse的控制台没有servers选项卡，点击Window--show views--servers 此时是没有有效的server的，点击新建一个，弹出的窗口确定下信息 然后next，接下来把我们的项目添加到配置里面（如下图），然后finish 4、测试结果打开项目名--Java resources，在src鼠标右击，new--servlet， 输入包名和类名，package：test，classname：page，finish，java内容如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445package test;import java.io.IOException;import java.io.PrintWriter;import javax.servlet.ServletException;import javax.servlet.annotation.WebServlet;import javax.servlet.http.HttpServlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;/** * Servlet implementation class page */@WebServlet(&quot;/page&quot;)public class page extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ public page() &#123; super(); // TODO Auto-generated constructor stub &#125; /** * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response) */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub response.getWriter().append(&quot;Served at: &quot;).append(request.getContextPath()); PrintWriter pw = response.getWriter(); pw.println(&quot;\\n&quot;+request.getParameter(&quot;username&quot;)); &#125; /** * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response) */ protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub doGet(request, response); &#125;&#125; webcontent右击--new--jsp file，文件名可设置为index.jsp，finish，jsp内容如下 123456789101112131415&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=ISO-8859-1&quot; pageEncoding=&quot;ISO-8859-1&quot;%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=&quot;ISO-8859-1&quot;&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form name=&quot;input&quot; action=&quot;page&quot; method=&quot;post&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;username&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt; &lt;/form&gt;&lt;/body&gt;&lt;/html&gt; 控制台servers选项卡，右击Tomcat，start，浏览器输入 http://localhost:8080/MyServlet/index.jsp 回车 即可看到输入框和submit按钮，输入hello，提交后，显示如下即为成功 然而此时的工程是部署在eclipse里的而不是Tomcat，所以在servers选项卡里 删掉现有的服务器，按照之前的步骤新建一个Tomcat后，双击Tomcat v9.0， 在server locations里面，选择use Tomcat installation即可，如下图","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://yoursite.com/tags/JavaWeb/"}]},{"title":"Java入门","slug":"Java入门","date":"2020-08-16T14:34:47.000Z","updated":"2020-08-16T14:36:05.487Z","comments":true,"path":"2020/08/16/Java入门/","link":"","permalink":"http://yoursite.com/2020/08/16/Java%E5%85%A5%E9%97%A8/","excerpt":"开始入门java，备份下非常基础的操作","text":"开始入门java，备份下非常基础的操作 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162import java.util.List;import java.io.File;import java.util.ArrayList;import java.util.Map;import java.util.HashMap;public class App &#123; public static void main(String[] args) throws Exception &#123; // myList(); // Integer a = 102; // System.out.print(a instanceof Integer); // myMap(); // StringBuilder abc = new StringBuilder(&quot;hello&quot;); // System.out.println(System.identityHashCode(abc)); // abc.setLength(0); // abc.append(&quot;second&quot;); // System.out.println(System.identityHashCode(abc)); // System.out.println(abc.toString()); myFile(); &#125; public static void myList()&#123; List&lt;String&gt; strList = new ArrayList&lt;String&gt;(); strList.add(&quot;Loyad&quot;); strList.add(&quot;Tio&quot;);; strList.contains(&quot;Tio&quot;); strList.indexOf(&quot;Loyad&quot;); for (String h : strList)&#123; System.out.printf(&quot;%s &quot;, h); &#125; for (int i = 0; i &lt; strList.size(); i ++)&#123; System.out.print(strList.get(i)); &#125; &#125; public static void myMap()&#123; Map&lt;String, Integer&gt; mymap = new HashMap&lt;&gt;(); mymap.put(&quot;Loyad&quot;, 98); mymap.put(&quot;Tio&quot;, 99); for (Map.Entry&lt;String, Integer&gt; entry : mymap.entrySet())&#123; String name = entry.getKey(); Integer score = entry.getValue(); System.out.println(name + &quot; &quot; + score); &#125; &#125; public static void myFile()&#123; File f = new File(&quot;.\\\\README.md&quot;); if (f.exists())&#123; if (f.isDirectory())&#123; for (File temp : f.listFiles())&#123; System.out.println(temp); &#125; &#125; else&#123; System.out.println(f.getName()); &#125; &#125; &#125;&#125;","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"}]},{"title":"Centos8 Docker 搭建 WebGoat8","slug":"Centos8-Docker-搭建-WebGoat8","date":"2020-08-15T06:39:30.000Z","updated":"2020-08-16T14:38:44.216Z","comments":true,"path":"2020/08/15/Centos8-Docker-搭建-WebGoat8/","link":"","permalink":"http://yoursite.com/2020/08/15/Centos8-Docker-%E6%90%AD%E5%BB%BA-WebGoat8/","excerpt":"搭建个环境来复习下相关知识，webgoat是4个月前更新的，比较新，就用虚拟机部署一下吧。","text":"搭建个环境来复习下相关知识，webgoat是4个月前更新的，比较新，就用虚拟机部署一下吧。 选择docker的原因，除了快速上手之外，在虚拟机搭建完成后，主机也可以通过ip地址访问到虚拟机的webgoat 步骤大纲 安装Centos 8 虚拟机 安装docker 搭建webgoat 安装Centos 8 虚拟机 首先用 vmware workstations pro 15 搭建好 centos8 ，安装步骤就不赘述了，最好用最新版本的vmware，安装完后自动安装vmtools，比较方便，之前的vmware安装的vm-tools由于内核选择不对，无法共享文件夹，现在最新版的已修复。 Centos 镜像下载：Centos 更改centos 8的yum源为阿里云，提高下载速度 备份 repo 1mv &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo.backup 下载 repo 1wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;CentOS-Base.repo http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;repo&#x2F;Centos-8.repo 生成缓存 yum makecache 更新系统 yum update 安装docker 下载docker-ce的repo 1curl https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo -o &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo 安装依赖 1yum install https:&#x2F;&#x2F;download.docker.com&#x2F;linux&#x2F;fedora&#x2F;30&#x2F;x86_64&#x2F;stable&#x2F;Packages&#x2F;containerd.io-1.2.6-3.3.fc30.x86_64.rpm 安装docker-ce 1yum install docker-ce 更改docker源，加快拉取速度 12345678vim &#x2F;etc&#x2F;docker&#x2F;daemon.json&#123; &quot;registry-mirrors&quot;: [ &quot;https:&#x2F;&#x2F;dockerhub.azk8s.cn&quot;, &quot;https:&#x2F;&#x2F;hub-mirror.c.163.com&quot; ]&#125;sudo systemctl daemon-reload 启动docker 1service start docker 搭建webgoat 拉取webgoat 1docker pull webgoat&#x2F;webgoat-8.0 运行webgoat 1docker run -p 8080:8080 -t webgoat&#x2F;webgoat-8.0 至此，webgoat搭建完成，主机可以通过ip访问虚拟机的webgoat","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"webgoat","slug":"webgoat","permalink":"http://yoursite.com/tags/webgoat/"}]},{"title":"Python模块 pathlib常规使用","slug":"Python模块-pathlib常规使用","date":"2020-08-15T05:45:09.000Z","updated":"2020-08-16T14:38:26.443Z","comments":true,"path":"2020/08/15/Python模块-pathlib常规使用/","link":"","permalink":"http://yoursite.com/2020/08/15/Python%E6%A8%A1%E5%9D%97-pathlib%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/","excerpt":"pathlib 是python3.4 之后内置的一个模块，用于文件系统的操作，用起来比os的path模块来得简单，所以记录下一些常用的操作。","text":"pathlib 是python3.4 之后内置的一个模块，用于文件系统的操作，用起来比os的path模块来得简单，所以记录下一些常用的操作。 常用操作 文件夹操作 文件操作 遍历文件 判断类型 在使用前，先导入pathlib模块中的Path函数 1from pathlib import Path 然后设定一个目录作为工作目录，有两种设定方式，一种是当前文件夹，还有一种是自定义设置目录 1234# 将当前py文件所在文件夹作为工作目录root = Path()# 自定义目录，使用 r&quot;&quot; 字符串可以不用转义反斜杠root = Path(r&quot;D:\\Downloads&quot;) 文件夹操作 创建文件夹 123# 创建一个dir目录dir = root / &quot;dir&quot;dir.mkdir() 删除文件夹 12# 删除dir目录dir.rmdir() 文件操作 创建文件 123# 创建一个readme.txt文件txt = root / &quot;readme.txt&quot;txt.touch() 获取文件信息 123456# 获取文件后缀 (.txt)txt.suffix# 获取文件名，不含后缀 (readme)txt.stem# 获取完整文件名 (readme.txt)txt.name 修改文件 读取文件 1234# 以文本方式读取内容content = txt.read_text()# 以二进制读取文件内容content = txt.read_bytes() 写入文件 1234# 以文本方式写入内容txt.write_text(&quot;hello, world&quot;)# 以二进制方式写入内容txt.write_bytes(b&quot;hello&quot;) 重命名文件 1234# 将 readme.txt 修改成 read.txttxt.replace(txt.with_name(&quot;read.txt&quot;))# 将 read.txt 修改后缀为 read.mdtxt.replace(txt.with_suffix(&quot;.md&quot;)) 删除文件 12# 删除 read.md 文件txt.unlink() 遍历文件 1234567891011# 遍历当前目录，打印目录和文件for x in root.iterdir(): print(x)# 输出当前目录下后缀为 py 的文件, 不会进入子目录查找，参数类似于正则匹配for x in root.glob(&quot;*.py&quot;): print(x) # 递归查找后缀为 txt 的文件，也就是会进入子目录查找for x in root.rglob(&quot;*.txt&quot;): print(X) 判断类型 12345678# 判断是否为文件root.is_file()# 判断是否为文件夹root.is_dir()# 判断文件或者文件夹是否存在root.exists() 小试牛刀 比方说，从网上下载下来的 jpg 文件，给它重命名 1234567891011121314import refrom pathlib import Path# 将此脚本放到和jpg文件同一个目录下root = Path()# 用正则表达式匹配需要修改的文件名rc = re.compile(r&quot;abcd\\.cc\\+-\\+(.*)&quot;)# 遍历当前文件夹的jpg文件for x in root.glob(&#x27;*.jpg&#x27;): if rc.match(x.stem): # 用re的sub方法，将匹配的字符串清空，然后重命名 x.replace(x.with_name(re.sub(r&quot;^abcd\\.cc\\+-\\+&quot;, &quot;&quot;, x.name))) 个人常用的，比较基础的就这些，其他更详细的可以查阅官方的文档 Pathlib","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"}]},{"title":"Typora的常规使用","slug":"Typora常规使用","date":"2020-08-15T04:27:59.000Z","updated":"2020-08-16T14:37:43.699Z","comments":true,"path":"2020/08/15/Typora常规使用/","link":"","permalink":"http://yoursite.com/2020/08/15/Typora%E5%B8%B8%E8%A7%84%E4%BD%BF%E7%94%A8/","excerpt":"Typora 是一款即时渲染的Markdown语法编辑器，用于记录、笔记都是不错的选择，下面是整理出的一些常用的操作。","text":"Typora 是一款即时渲染的Markdown语法编辑器，用于记录、笔记都是不错的选择，下面是整理出的一些常用的操作。 Typora 使用1、标题 Ctrl + {1-6} 分别格式不同级别的标题 Ctrl + {=、-} 分别提高、降低标题的等级 *** 回车能够打出下划线 ## 也能打印不同级别的标题 2、引用 &gt; 引用内容 &gt;&gt;引用内容2 多次回车即可跳回上级引用 3、代码 `code` 编辑单行代码 List&lt;&gt; strList = new ArrayList&lt;&gt;(); ```python 或者 ~~~python 插入指定类型的代码块 123import thismyStr = [&quot;artiver&quot;, &quot;com&quot;]print(&quot;.&quot;.join(myStr)) Ctrl + shift + m 插入公式，Ctrl + enter跳出 $$f = ma$$ 4、列表 无序列表 单行无序列表 * 无序列表 + 无序列表 - 无序列表 多行无序列表 * 列表1 tab * 列表2 tab tab * 列表3 有序列表 有序列表1 有序列表2 Enter + tab 有序列表2.1 有序列表2.2 有序列表3 Ctrl + { [、] } 减少缩进或者增加缩进 5、表格 |姓名|年龄| 姓名 年龄 Loyad 23 Tio 22 6、图片 本地图片 待补充 网络图片 Ctrl + shift + I 超链接 Ctrl + k 必应 &lt;Url&gt; https://github.com 7、其他 ctrl + i 斜体 ctrl + b 加粗 ctrl + u 文字下划线 ctrl + \\ 清除样式 alt + shift + 5 删除线 &lt;!--注释--&gt; \\ 可以转义字符 [toc] 生成目录 注脚[^1] ，Typora[^1]，通常注脚内容写最后吧 [^1]: 一份编辑器","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Typora","slug":"Typora","permalink":"http://yoursite.com/tags/Typora/"}]},{"title":"Hexo搭建","slug":"Hexo搭建","date":"2020-08-15T00:26:35.000Z","updated":"2020-08-16T14:38:02.713Z","comments":true,"path":"2020/08/15/Hexo搭建/","link":"","permalink":"http://yoursite.com/2020/08/15/Hexo%E6%90%AD%E5%BB%BA/","excerpt":"搭建静态博客，免费运行在Gitee上，hexo还可以更换主题，具体的之后再写写吧 记录下搭建过程，作为博客第一篇文章吧","text":"搭建静态博客，免费运行在Gitee上，hexo还可以更换主题，具体的之后再写写吧 记录下搭建过程，作为博客第一篇文章吧 搭建Hexo 安装Node环境 去Node官网下载稳定版的node.js，我的版本是12.14.1长期支持版。 下载完成后，一路next安装就行了，win+r键打开cmd，运行node -v，有版本号提示就是安装成功了。 如果没有梯子，包下载速度是很慢的，我们可以改成国内源提高下载速度。 在cmd输入下列代码，然后回车。 npm config set registry https://registry.npm.taobao.org 如果有梯子，下面的Git也可以自己配置好代理，提高拉取速度。 安装Git 到Git官网下载最新的安装包，目前我的版本是2.25.0，一路next安装就可以了 安装完会发现鼠标右键多了两个菜单，Git bash here和Git GUI here 注册Gitee账号开启page 你也可以注册github账号，步骤都差不多，但国内的码云访问比较快 注册登录好后，点击右上角的+号，新建仓库内容填写如下： 路径名随意输入，后面设置的时候，码云会自动生成*.gitee.io的域名，所以路径名最好不要重复gitee.io（截图里路径填的应该是Artiver），然后勾选使用readme初始化仓库，然后点击创建就行了。创建完成后，到服务下拉框选择gitee pages进入，然后可以勾选强制https，然后启动。 启动完成后即会生成域名，访问就是你的主页啦！ 安装hexo 到一个合适的目录下，建立一个用于存放博客的文件夹，进入后，鼠标右键–Git bash here， 安装hexo npm i hexo-cli -g 初始化文件夹 hexo init 安装组件 npm installnpm i hexo-deployer-git 生成静态网页 hexo g 开启本地服务器，浏览器访问localhost:4000即可访问主页 hexo s 主页访问完毕后，Ctrl + c即可关闭服务器 连接gitee和本地 右键打开Git bash here，增加信息 git config --global user.name &quot;你的用户名&quot;git config --global user.email &quot;注册gitee的邮箱&quot; 生成公私钥对，生成的公钥默认目录在 C:\\Users{用户}.ssh\\id_rsa.pub，文本方式打开即可 ssh-keygen.exe -t rsa -C &quot;你的邮箱&quot; 打开gitee–设置–SSH公钥–添加你的公钥，将id_rsa.pub的内容添加到这即可 进入博客根目录，打开_config.yml文件，末尾添加以下内容： 1234deploy: type: git repository: https://gitee.com/Artiver/Artiver # 你存放博客的gitee地址 branch: master 添加、删除文章 添加博客，到博客根目录，Git bash here hexo new post &quot;文章标题&quot; 然后在\\source_posts目录下，会生成一个md文件，编辑这个文件即可编辑 编辑完成即可hexo g生成静态网页，hexo s开启服务器，浏览器访问就可以看到首页有文章了 删除博客，到_post目录下删除相应的文件，然后先清理再生成即可，如下： hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 部署到gitee上 在本地调试都完成的情况下，就可以把博客推送到gitee上了 hexo d 初次部署，会叫你填入gitee账号密码，填写完成即可推送 推送完成，到主页–服务–gitee pages，选择重新部署 稍等片刻，然后访问你gitee.io的主页即可看到和本地一样的效果了 一些调试与设置 1、创建“分类”选项1.1 生成“分类”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page categories 根据创建的提示路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: categoriesdate: 2020-08-15 17:00:40--- 添加type: &quot;categories&quot;到内容中，可以如下设置： 12345---title: 分类date: 2020-08-15 17:00:40type: &quot;categories&quot;--- 保存并关闭文件。 1.2 给文章添加“categories”属性打开需要添加分类的文章，为其添加categories属性。 123456---title: jQuerydate: 2020-08-15 17:00:40categories: - web前端--- 2、创建“标签”选项2.1 生成“标签”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page tags 根据提示的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: tagsdate: 2020-08-15 17:00:40--- 添加type: &quot;tags&quot;到内容中，添加后是这样的： 12345---title: 分类date: 2020-08-15 17:00:40type: &quot;tags&quot;--- 保存并关闭文件。 2.2 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。 123456789---title: jQuerydate: 2020-08-15 17:00:40categories: - web前端tags:- jQuery- 表格--- 可以打开scaffolds/post.md文件，在tages:上面加入categories:，保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了，也可以自己定义模板值，初始化就有默认的tags与categories。需要注意的是，一定要记得layout属性的设置，这个因主题不同而异，否则打开标签或者分类会是空白的页面。","categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}],"categories":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://yoursite.com/tags/JavaWeb/"},{"name":"Java","slug":"Java","permalink":"http://yoursite.com/tags/Java/"},{"name":"webgoat","slug":"webgoat","permalink":"http://yoursite.com/tags/webgoat/"},{"name":"python","slug":"python","permalink":"http://yoursite.com/tags/python/"},{"name":"Typora","slug":"Typora","permalink":"http://yoursite.com/tags/Typora/"},{"name":"Hexo","slug":"Hexo","permalink":"http://yoursite.com/tags/Hexo/"}]}